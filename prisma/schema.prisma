generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  organizationMemberships OrganizationMember[]
  ownedOrganizations Organization[]
  apiKeys ApiKey[]
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members      OrganizationMember[]
  subscription Subscription?
  apiKeys      ApiKey[]
  projects     Project[]
}

model OrganizationMember {
  id     String               @id @default(cuid())
  role   OrganizationRole     @default(MEMBER)
  status OrganizationStatus   @default(PENDING)
  joinedAt DateTime           @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum OrganizationStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model Subscription {
  id                String            @id @default(cuid())
  status            SubscriptionStatus
  priceId           String
  customerId        String
  subscriptionId    String            @unique
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  plan Plan @relation(fields: [priceId], references: [priceId])
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  priceId     String   @unique
  amount      Int      // Amount in cents
  currency    String   @default("usd")
  interval    PlanInterval
  features    Json     // Store plan features as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

enum PlanInterval {
  MONTH
  YEAR
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  usageRecords UsageRecord[]
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  keyHash     String    @unique
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  usageRecords UsageRecord[]
}

model UsageRecord {
  id        String   @id @default(cuid())
  metric    String   // e.g., "api_calls", "storage_gb", "users"
  quantity  Int
  timestamp DateTime @default(now())

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  apiKeyId String?
  apiKey   ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([metric, timestamp])
  @@index([projectId, timestamp])
}